---
title: "NORSAR Machine Learning Workshop,<br>Sept 17-18 2025"
order: 1
format: html
toc: true
---

Welcome to the 2025 workshop on machine learning (ML) in seismology, where we will
learn, try out, and develop ML tools for use at NORSAR. 

Slides, exercises and other material will be kept on this webpage for later reference.
If you have suggestions for additions or improvements, submit a
[pull request](https://github.com/smaeland/norsar-ml-workshop/pulls)!


## [Before the workshop]{style="color: #AD1457;"}

To make the workshop as productive as possible, we encourage everyone to go
through the following beforehand:

- [ ] **Test** that you have a setup that can run the exercises. We aim to run everything
online in _Google Colab_, which requires a Google account, but nothing more. To
complete the test, click [here](https://colab.research.google.com/github/smaeland/norsar-ml-workshop/blob/main/0_setup_test.ipynb) to open our first exercise, and click through it
(takes 2 min, tops). If you do not have/want a Google account, take a look at the
other options listed in @sec-notebooks.

- [ ] **Read** some of the background material in @sec-background, especially the
first of the review articles, to get some inspiration to what tasks can be
solved with modern machine learning.

- [ ] **Think** about topics or ideas to you would like to discuss or even prototype
during the workshop. Around half of day 2 will be dedicated to exploring new
projects.

##### Optional

In addition to the points above, it will be helpful for the exercises we have
planned to take a look at the technical stuff in @sec-technical, and run though
the various tutorials to get comfortable with Python and its libraries. We will
do a quickstart on the first day of the workshop as well, but doing it beforehand
is a lot more efficient.

## Agenda 

Both days will take place in Maskinhallen. The agenda will most likely change
a bit up until Wednesday, but the start and end times are absolute.

_**Remote participation:**_ Teams link can be found in the meeting invitation.

#### Wednesday

|   |   |   |
|---|---|---|
|  9.00 | Intro | [Slides](slides/day1.qmd) |
|  9.30 | Exercise: Event detection | Notebook: [Colab](https://colab.research.google.com/github/smaeland/norsar-ml-workshop/blob/main/1_event_detection.ipynb) or [download](https://github.com/smaeland/norsar-ml-workshop/blob/main/1_event_detection.ipynb) |
| 10.00 | Post-exercise: Understanding what we did | [Slides](slides/day1.qmd) | 
| 11.00 | Exercise: Event classification |  Notebook: [Colab](https://colab.research.google.com/github/smaeland/norsar-ml-workshop/blob/main/2_event_classification.ipynb) or [download](https://github.com/smaeland/norsar-ml-workshop/blob/main/2_event_classification.ipynb) | 
| 11.45 | ✨Special✨ lunch | |
| 12.30 | Discussion | | 
| 13.00 | End of day 1 | | 


#### Thursday

|   |   |   |
|---|---|---|
|  9.00 | Recap from yesterday |  |
|  9.15 | Deep learning tools | [Slides](slides/day2.qmd) | 
|  9.30 | Exercise: Training deep learning models | Notebook: [Colab](https://colab.research.google.com/github/smaeland/norsar-ml-workshop/blob/main/4_clustering.ipynb) or [download](https://github.com/smaeland/norsar-ml-workshop/blob/main/3_phase_picker.ipynb) |
| 10.00 | Post-exercise: Finding the optimal model | [Slides](slides/day2.qmd) | 
| 10.30 | Recent and future ML at NORSAR | | 
| 11.00 | Exercise: Using pretrained models | Notebook: [Colab](https://colab.research.google.com/github/smaeland/norsar-ml-workshop/blob/main/4_clustering.ipynb) or [download](https://github.com/smaeland/norsar-ml-workshop/blob/main/3_phase_picker.ipynb) | 
| 11.45 | Lunch (kantinen) | |
| 12.30 | Wrap-up and discussions | |
| 13.00 | End of day 2 | | 
 

<!-- Wednesday: [Slides](slides/lecture1.qmd) -->

<!-- Thursday: [Slides](slides/lecture2.qmd) -->


## Background material {#sec-background}

These review articles give a fairly comprehensive (although brief) overview
of machine learning applications in seismology:

- Old but gold: [Machine Learning in Seismology: Turning Data into Insights](https://pubs.geoscienceworld.org/ssa/srl/article-abstract/90/1/3/566430/Machine-Learning-in-Seismology-Turning-Data-into),
Q. Kong et al., 2019 (direct link to [PDF](pdfs/emerging-topics-srl.pdf))
- More recent, with relatively narrow scope: [Machine Learning in Earthquake Seismology](https://www.annualreviews.org/content/journals/10.1146/annurev-earth-071822-100323),
 S.M. Mousavi and G. C. Beroza, 2023 (direct link to [PDF](pdfs/annurev-earth-071822-100323.pdf))
- Relatively recent, with wider scope: [Deep-learning seismology](https://www.science.org/doi/full/10.1126/science.abm4470),
S.M. Mousavi and G.C. Beroza, 2022

For a beginner-friendly, hands-on book on deep learning, [Deep Learning with Python](https://www.google.com/search?q=chollet+deep+learning)
by F. Chollet is an absolutely great resource.

### Selected NORSAR ML works

As you know, NORSAR has made strong contributions to the field, documented for instance by these works: 

- [Deep learning models for regional phase detection on seismic stations in Northern Europe and the European Arctic](https://academic.oup.com/gji/article/239/2/862/7740467)
(code available on [GitHub](https://github.com/NorwegianSeismicArray/tphasenet))

- [Self-supervised learning of seismological data reveals new eruptive sequences at the Mayotte submarine volcano](https://academic.oup.com/gji/article/240/1/1/7817994)

- [Monitoring urban construction and quarry blasts with low-cost seismic sensors and deep learning tools in the city of Oslo, Norway](http://seismica.library.mcgill.ca/article/view/1166)

- [ArrayNet: A Combined Seismic Phase Classification and Back‐Azimuth Regression Neural Network for Array Processing Pipelines](https://pubs.geoscienceworld.org/ssa/bssa/article-abstract/113/6/2345/627723/ArrayNet-A-Combined-Seismic-Phase-Classification?redirectedFrom=fulltext)
(code available on [GitHub](https://github.com/NorwegianSeismicArray/arraynet))

- [Predicting infrasound transmission loss using deep learning](https://academic.oup.com/gji/article/232/1/274/6661419)

- [Seismic and infrasound monitoring of military conflicts using machine learning](https://quentinbrissaud.github.io/images/2023.05.04_Brissaud_Ukraine_ML_Sandia.pdf)

- [Enhancing seismic calving event identification in Svalbard through empirical matched field processing and machine learning](https://academic.oup.com/gji/article/230/2/1305/6551899)

Note that we have a bit of a tradition for open-sourcing the code used to
produce results, made available on the NORSAR [GitHub](https://github.com/NorwegianSeismicArray)
and the Zenodo platform.


## Technical things {#sec-technical}

During the workshop we will do various hands-on exercises, most of which benefit
from some experience with programming. Luckily, the de-facto programming language
for machine learning is _Python_, which is relatively easy to get started with.

There are three pieces of tech we will be using:

1. **Python**, the programming langage,
2. Python **libraries**, containing code to actually do stuff, and
3. **Jupyter notebooks**, which is a convenient way of running Python.

The magic of 3. is that you **_do not need to install anything_**, instead we
run the code online, in a browser. Below follows an introduction, and some
reference material, to the three.

#### Python

If you already have some coding background in a different language, the [Python
cheat sheet](https://realpython.com/cheatsheets/python/) gives the essential
overview of the language, while the official [tutorial](https://docs.python.org/3/tutorial/)
goes in depth.

If you have less programming experience, Google's [Python course](https://developers.google.com/edu/python)
is quite nice, or in case you would like something in video format, Microsoft has
made a [Python for beginners](https://learn.microsoft.com/en-us/shows/intro-to-python-development/)
video series.

However, in the end we can get away with limited Python knowledge, since the
majority of our interaction with both the data and the ML models is through
the set of libraries decribed below. And, given the modern tools at our disposal,
we can always [ask for help](https://chatgpt.com/).

> _Hey ChatGPT, I already know Matlab, can you give me a super-short (like, really short) introduction to Python?_


#### Required Python libraries 

The main data structure we use for data-intensive tasks like ML is the _array_,
provided by the [NumPy](https://numpy.org/) (*Num*erical *Py*thon) library. 
It looks like this:

```{.python}
>>> import numpy as np
>>> a = np.array([[1,2,3], [4,5,6]])
>>> a
array([[1, 2, 3],
       [4, 5, 6]])
>>> a.shape
(2, 3)
```

and allows for performing operations on each element _without_ writing
explicit `for`-loops:

```{.python}
>>> a + 10
array([[11, 12, 13],
       [14, 15, 16]])
```

While we will cover some NumPy basics during the workshop, the essentials
are given in these two tutorials: [NumPy quickstart](https://numpy.org/doc/stable/user/quickstart.html),
for those who are already familiar with Python, and [NumPy basics for beginners](https://numpy.org/doc/stable/user/absolute_beginners.html)
for ... well, beginners. 

To perform all the computations involved in doing deep learning, we need a library
that can do automatic differentiation and efficient matrix multiplications. A popular
option is TensorFlow and its companion interface for building neural networks, [Keras](keras.io).
A nice thing about Keras is the extensive [example gallery](https://keras.io/examples/),
which serves as inspiration for solving loads of different tasks. While other options for
deep learning frameworks have their benefits too, they mostly all follow similar syntax
for data operations as NumPy, making it relatively easy to switch between them, as long
as one knows NumPy.


#### Jupyter notebooks {#sec-notebooks}

Jupyter notebooks form a convenient way of prototyping code, by mixing code, text
and graphics in a single document. The easiest option for running the exercise
notebooks is through a cloud service, in which case there is nothing to install.
Alternatives are (choose one):

- [Google Colab](https://colab.research.google.com/) **(Preferred)**: Requires
a Google account (like GMail), but otherwise free.
- [Kaggle Code](https://www.kaggle.com/code): Requires an account, but otherwise free.
- Install on our own machine: No accounts required, but setup may take a few minutes.
Instructions are given in the [Jupyter docs](https://docs.jupyter.org/en/latest/install/notebook-classic.html).

The notebooks are mostly self-explanatory, but the basics are also given in the
[Jupyter Notebook 101](https://www.kaggle.com/code/jhoward/jupyter-notebook-101)
course, and documented in detail on the [Jupyter website](https://docs.jupyter.org/en/latest/).





## Post-read and other material

Here we will collect workshop material for future reference 💾. 

